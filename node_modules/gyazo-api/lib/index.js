'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Gyazo = function () {
  function Gyazo() {
    var accessToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, Gyazo);

    this.accessToken = accessToken;
  }

  _createClass(Gyazo, [{
    key: 'upload',
    value: function upload(image) {
      var _this = this;

      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return new Promise(function (resolve, reject) {
        if (!image) throw new Error('image is undefined');
        if (typeof image === 'string') image = _fs2.default.createReadStream(image);
        var url = 'https://upload.gyazo.com/api/upload';
        var req = _request2.default.post({
          url: url
        }, function (err, res, body) {
          if (err) return reject(err);
          if (res.statusCode !== 200) return reject(res.body);
          resolve({
            response: res,
            data: JSON.parse(body)
          });
        });
        var form = req.form();
        form.append('imagedata', image);
        form.append('access_token', _this.accessToken);
        for (var k in params) {
          form.append(k, params[k]);
        }
      });
    }
  }, {
    key: 'list',
    value: function list() {
      var _this2 = this;

      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return new Promise(function (resolve, reject) {
        query.access_token = _this2.accessToken;
        var url = 'https://api.gyazo.com/api/images';
        _request2.default.get({
          url: url,
          qs: query
        }, function (err, res, body) {
          if (err) return reject(err);
          if (res.statusCode !== 200) return reject(res.body);
          resolve({
            response: res,
            data: JSON.parse(res.body)
          });
        });
      });
    }
  }, {
    key: 'delete',
    value: function _delete(imageId) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        if (!imageId) throw new Error('imageId is undefined');
        var url = 'https://api.gyazo.com/api/images/' + imageId;
        _request2.default.del({
          url: url,
          qs: {
            access_token: _this3.accessToken
          }
        }, function (err, res, body) {
          if (err) return reject(err);
          if (res.statusCode !== 200) return reject(res.body);
          resolve({
            response: res,
            data: JSON.parse(res.body)
          });
        });
      });
    }
  }]);

  return Gyazo;
}();

exports.default = Gyazo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJHeWF6byIsImFjY2Vzc1Rva2VuIiwiaW1hZ2UiLCJwYXJhbXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIkVycm9yIiwiY3JlYXRlUmVhZFN0cmVhbSIsInVybCIsInJlcSIsInBvc3QiLCJlcnIiLCJyZXMiLCJib2R5Iiwic3RhdHVzQ29kZSIsInJlc3BvbnNlIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImZvcm0iLCJhcHBlbmQiLCJrIiwicXVlcnkiLCJhY2Nlc3NfdG9rZW4iLCJnZXQiLCJxcyIsImltYWdlSWQiLCJkZWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7Ozs7Ozs7SUFFcUJBLEs7QUFFbkIsbUJBQWlDO0FBQUEsUUFBcEJDLFdBQW9CLHVFQUFOLElBQU07O0FBQUE7O0FBQy9CLFNBQUtBLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0Q7Ozs7MkJBRU9DLEssRUFBb0I7QUFBQTs7QUFBQSxVQUFiQyxNQUFhLHVFQUFKLEVBQUk7O0FBQzFCLGFBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxZQUFJLENBQUNKLEtBQUwsRUFBWSxNQUFNLElBQUlLLEtBQUosQ0FBVSxvQkFBVixDQUFOO0FBQ1osWUFBSSxPQUFPTCxLQUFQLEtBQWlCLFFBQXJCLEVBQStCQSxRQUFRLGFBQUdNLGdCQUFILENBQW9CTixLQUFwQixDQUFSO0FBQy9CLFlBQU1PLE1BQU0scUNBQVo7QUFDQSxZQUFNQyxNQUFNLGtCQUFRQyxJQUFSLENBQWE7QUFDdkJGLGVBQUtBO0FBRGtCLFNBQWIsRUFFVCxVQUFDRyxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUNyQixjQUFJRixHQUFKLEVBQVMsT0FBT04sT0FBT00sR0FBUCxDQUFQO0FBQ1QsY0FBSUMsSUFBSUUsVUFBSixLQUFtQixHQUF2QixFQUE0QixPQUFPVCxPQUFPTyxJQUFJQyxJQUFYLENBQVA7QUFDNUJULGtCQUFRO0FBQ05XLHNCQUFVSCxHQURKO0FBRU5JLGtCQUFNQyxLQUFLQyxLQUFMLENBQVdMLElBQVg7QUFGQSxXQUFSO0FBSUQsU0FUVyxDQUFaO0FBVUEsWUFBTU0sT0FBT1YsSUFBSVUsSUFBSixFQUFiO0FBQ0FBLGFBQUtDLE1BQUwsQ0FBWSxXQUFaLEVBQXlCbkIsS0FBekI7QUFDQWtCLGFBQUtDLE1BQUwsQ0FBWSxjQUFaLEVBQTRCLE1BQUtwQixXQUFqQztBQUNBLGFBQUssSUFBSXFCLENBQVQsSUFBY25CLE1BQWQsRUFBc0I7QUFDcEJpQixlQUFLQyxNQUFMLENBQVlDLENBQVosRUFBZW5CLE9BQU9tQixDQUFQLENBQWY7QUFDRDtBQUNGLE9BcEJNLENBQVA7QUFxQkQ7OzsyQkFFaUI7QUFBQTs7QUFBQSxVQUFaQyxLQUFZLHVFQUFKLEVBQUk7O0FBQ2hCLGFBQU8sSUFBSW5CLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdENpQixjQUFNQyxZQUFOLEdBQXFCLE9BQUt2QixXQUExQjtBQUNBLFlBQU1RLE1BQU0sa0NBQVo7QUFDQSwwQkFBUWdCLEdBQVIsQ0FBWTtBQUNWaEIsZUFBS0EsR0FESztBQUVWaUIsY0FBSUg7QUFGTSxTQUFaLEVBR0csVUFBQ1gsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsRUFBb0I7QUFDckIsY0FBSUYsR0FBSixFQUFTLE9BQU9OLE9BQU9NLEdBQVAsQ0FBUDtBQUNULGNBQUlDLElBQUlFLFVBQUosS0FBbUIsR0FBdkIsRUFBNEIsT0FBT1QsT0FBT08sSUFBSUMsSUFBWCxDQUFQO0FBQzVCVCxrQkFBUTtBQUNOVyxzQkFBVUgsR0FESjtBQUVOSSxrQkFBTUMsS0FBS0MsS0FBTCxDQUFXTixJQUFJQyxJQUFmO0FBRkEsV0FBUjtBQUlELFNBVkQ7QUFXRCxPQWRNLENBQVA7QUFlRDs7OzRCQUVPYSxPLEVBQVM7QUFBQTs7QUFDZixhQUFPLElBQUl2QixPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3RDLFlBQUksQ0FBQ3FCLE9BQUwsRUFBYyxNQUFNLElBQUlwQixLQUFKLENBQVUsc0JBQVYsQ0FBTjtBQUNkLFlBQU1FLDRDQUEwQ2tCLE9BQWhEO0FBQ0EsMEJBQVFDLEdBQVIsQ0FBWTtBQUNWbkIsZUFBS0EsR0FESztBQUVWaUIsY0FBSTtBQUNGRiwwQkFBYyxPQUFLdkI7QUFEakI7QUFGTSxTQUFaLEVBS0csVUFBQ1csR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsRUFBb0I7QUFDckIsY0FBSUYsR0FBSixFQUFTLE9BQU9OLE9BQU9NLEdBQVAsQ0FBUDtBQUNULGNBQUlDLElBQUlFLFVBQUosS0FBbUIsR0FBdkIsRUFBNEIsT0FBT1QsT0FBT08sSUFBSUMsSUFBWCxDQUFQO0FBQzVCVCxrQkFBUTtBQUNOVyxzQkFBVUgsR0FESjtBQUVOSSxrQkFBTUMsS0FBS0MsS0FBTCxDQUFXTixJQUFJQyxJQUFmO0FBRkEsV0FBUjtBQUlELFNBWkQ7QUFhRCxPQWhCTSxDQUFQO0FBaUJEOzs7Ozs7a0JBbEVrQmQsSyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEd5YXpvIHtcblxuICBjb25zdHJ1Y3RvciAoYWNjZXNzVG9rZW4gPSBudWxsKSB7XG4gICAgdGhpcy5hY2Nlc3NUb2tlbiA9IGFjY2Vzc1Rva2VuXG4gIH1cblxuICB1cGxvYWQgKGltYWdlLCBwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAoIWltYWdlKSB0aHJvdyBuZXcgRXJyb3IoJ2ltYWdlIGlzIHVuZGVmaW5lZCcpXG4gICAgICBpZiAodHlwZW9mIGltYWdlID09PSAnc3RyaW5nJykgaW1hZ2UgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKGltYWdlKVxuICAgICAgY29uc3QgdXJsID0gJ2h0dHBzOi8vdXBsb2FkLmd5YXpvLmNvbS9hcGkvdXBsb2FkJ1xuICAgICAgY29uc3QgcmVxID0gcmVxdWVzdC5wb3N0KHtcbiAgICAgICAgdXJsOiB1cmxcbiAgICAgIH0sIChlcnIsIHJlcywgYm9keSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycilcbiAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlICE9PSAyMDApIHJldHVybiByZWplY3QocmVzLmJvZHkpXG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIHJlc3BvbnNlOiByZXMsXG4gICAgICAgICAgZGF0YTogSlNPTi5wYXJzZShib2R5KVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIGNvbnN0IGZvcm0gPSByZXEuZm9ybSgpXG4gICAgICBmb3JtLmFwcGVuZCgnaW1hZ2VkYXRhJywgaW1hZ2UpXG4gICAgICBmb3JtLmFwcGVuZCgnYWNjZXNzX3Rva2VuJywgdGhpcy5hY2Nlc3NUb2tlbilcbiAgICAgIGZvciAobGV0IGsgaW4gcGFyYW1zKSB7XG4gICAgICAgIGZvcm0uYXBwZW5kKGssIHBhcmFtc1trXSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgbGlzdCAocXVlcnkgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBxdWVyeS5hY2Nlc3NfdG9rZW4gPSB0aGlzLmFjY2Vzc1Rva2VuXG4gICAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly9hcGkuZ3lhem8uY29tL2FwaS9pbWFnZXMnXG4gICAgICByZXF1ZXN0LmdldCh7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBxczogcXVlcnlcbiAgICAgIH0sIChlcnIsIHJlcywgYm9keSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycilcbiAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlICE9PSAyMDApIHJldHVybiByZWplY3QocmVzLmJvZHkpXG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIHJlc3BvbnNlOiByZXMsXG4gICAgICAgICAgZGF0YTogSlNPTi5wYXJzZShyZXMuYm9keSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGRlbGV0ZSAoaW1hZ2VJZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAoIWltYWdlSWQpIHRocm93IG5ldyBFcnJvcignaW1hZ2VJZCBpcyB1bmRlZmluZWQnKVxuICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmd5YXpvLmNvbS9hcGkvaW1hZ2VzLyR7aW1hZ2VJZH1gXG4gICAgICByZXF1ZXN0LmRlbCh7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBxczoge1xuICAgICAgICAgIGFjY2Vzc190b2tlbjogdGhpcy5hY2Nlc3NUb2tlblxuICAgICAgICB9XG4gICAgICB9LCAoZXJyLCByZXMsIGJvZHkpID0+IHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpXG4gICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSAhPT0gMjAwKSByZXR1cm4gcmVqZWN0KHJlcy5ib2R5KVxuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICByZXNwb25zZTogcmVzLFxuICAgICAgICAgIGRhdGE6IEpTT04ucGFyc2UocmVzLmJvZHkpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==